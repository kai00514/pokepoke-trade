"use client"

import type React from "react"
import { createContext, useContext, useEffect, useState, useCallback } from "react"
import { createClient } from "@/lib/supabase/client"
import type { User } from "@supabase/supabase-js"
import { getUserProfile, getDisplayName } from "@/lib/services/user-service" // UserProfile„Çí„Ç§„É≥„Éù„Éº„Éà

// UserProfile„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„Çíuser-service.ts„Å®ÂêåÊúü
interface AuthUserProfile {
  id: string
  avatar_url: string | null
}

interface AuthContextType {
  user: User | null
  userProfile: AuthUserProfile | null // Êõ¥Êñ∞„Åï„Çå„ÅüUserProfile„Çí‰ΩøÁî®
  loading: boolean
  displayName: string
  signOut: () => Promise<void>
  refreshUserProfile: () => Promise<void>
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [userProfile, setUserProfile] = useState<AuthUserProfile | null>(null) // Êõ¥Êñ∞„Åï„Çå„ÅüUserProfile„Çí‰ΩøÁî®
  const [loading, setLoading] = useState(true)
  const [displayName, setDisplayName] = useState<string>("„Ç≤„Çπ„Éà")

  const supabase = createClient()

  // „É¶„Éº„Ç∂„Éº„Å®„Éó„É≠„Éï„Ç£„Éº„É´„Çí„Éï„Çß„ÉÉ„ÉÅ„Åô„ÇãÂÖ±ÈÄöÈñ¢Êï∞
  const fetchUserAndProfile = useCallback(async () => {
    console.log("üîÑ fetchUserAndProfile called...")
    setLoading(true)
    try {
      const {
        data: { session },
        error: sessionError,
      } = await supabase.auth.getSession()

      if (sessionError) {
        console.error("‚ùå Error getting session in fetchUserAndProfile:", sessionError)
        setUser(null)
        setUserProfile(null)
        setDisplayName("„Ç≤„Çπ„Éà")
      } else {
        const currentUser = session?.user ?? null
        setUser(currentUser)
        console.log("‚úÖ User set:", currentUser ? currentUser.id : "null")

        if (currentUser) {
          // getUserProfile„Åã„Çâavatar_url„ÅÆ„Åø„ÇíÂèñÂæó
          const profileResult = await getUserProfile(currentUser.id)
          if (profileResult.success && profileResult.profile) {
            setUserProfile(profileResult.profile)
            // displayName„ÅØuser.user_metadata„Å®userProfile„ÅÆavatar_url„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„Å¶ÁîüÊàê
            setDisplayName(getDisplayName(currentUser, profileResult.profile))
            console.log("‚úÖ User profile set:", profileResult.profile.id)
          } else {
            console.warn("‚ö†Ô∏è User profile (avatar_url) not found or error in fetchUserAndProfile:", profileResult.error)
            setUserProfile(null)
            setDisplayName(getDisplayName(currentUser, null)) // userProfile„Åånull„ÅÆÂ†¥Âêà„ÇÇdisplayName„ÇíË®àÁÆó
          }
        } else {
          setUserProfile(null)
          setDisplayName("„Ç≤„Çπ„Éà")
          console.log("‚ÑπÔ∏è No current user, userProfile cleared.")
        }
      }
    } catch (err) {
      console.error("‚ùå Unexpected error in fetchUserAndProfile:", err)
      setUser(null)
      setUserProfile(null)
      setDisplayName("„Ç≤„Çπ„Éà")
    } finally {
      setLoading(false)
      console.log("‚úÖ fetchUserAndProfile finished. Loading:", false)
    }
  }, [supabase]) // supabase „Çí‰æùÂ≠òÈÖçÂàó„Å´ËøΩÂä†

  const signOut = useCallback(async () => {
    console.log("üëã Attempting to sign out...")
    setLoading(true)
    try {
      const { error } = await supabase.auth.signOut()
      if (error) {
        console.error("‚ùå Supabase signOut error:", error)
        throw error
      }
      console.log("‚úÖ Supabase signOut successful. Forcing state refresh and redirect.")
      setUser(null)
      setUserProfile(null)
      setDisplayName("„Ç≤„Çπ„Éà")
      setLoading(false)
      window.location.href = "/"
    } catch (error) {
      console.error("‚ùå Error during signOut process:", error)
      setLoading(false)
    }
  }, [supabase])

  const refreshUserProfile = useCallback(async () => {
    if (user?.id) {
      await fetchUserAndProfile() // userProfile„Å†„Åë„Åß„Å™„Åè„ÄÅuser„ÇÇÂÜç„Éï„Çß„ÉÉ„ÉÅ
    }
  }, [user, fetchUserAndProfile])

  useEffect(() => {
    fetchUserAndProfile()

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange(async (event, session) => {
      console.log("üîÑ Auth state change detected:", event, session?.user ? "logged in" : "logged out")
      if (event === "SIGNED_OUT") {
        console.log("üëã SIGNED_OUT event received. Clearing user state and redirecting.")
        setUser(null)
        setUserProfile(null)
        setDisplayName("„Ç≤„Çπ„Éà")
        setLoading(false)
        window.location.href = "/"
        return
      }
      fetchUserAndProfile()
    })

    return () => {
      console.log("üßπ Cleaning up auth subscription")
      subscription.unsubscribe()
    }
  }, [supabase.auth, fetchUserAndProfile])

  useEffect(() => {
    console.log("üîç Auth Context State (Render):", {
      user: user ? { id: user.id, email: user.email } : null,
      userProfile,
      loading,
      displayName,
    })
  }, [user, userProfile, loading, displayName])

  return (
    <AuthContext.Provider value={{ user, userProfile, loading, displayName, signOut, refreshUserProfile }}>
      {children}
    </AuthContext.Provider>
  )
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider")
  }
  return context
}
